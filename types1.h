
#ifndef TYPES1_H__
#define TYPES1_H__
#include <time.h>
#include <unordered_map>
#include <stack>


#define ANSI_UNDERLINED_PRE  "\033[4m"
#define ANSI_UNDERLINED_POST "\033[0m"

//program definitions
#define u32 uint32_t
#define i64 int64_t
#define u64 uint64_t

#define B0 0x1
#define B1 0x2
#define B2 0x4
#define B3 0x8
#define B4 0x10
#define B5 0x20
#define B6 0x40
#define B7 0x80
#define B8 0x100
#define B9 0x200
#define B10 0x400
#define B11 0x800
#define B12 0x1000
#define B13 0x2000
#define B14 0x4000
#define B15 0x8000
#define B16 0x10000
#define B17 0x20000
#define B18 0x40000
#define B19 0x80000
#define B20 0x100000
#define B21 0x200000
#define B22 0x400000
#define B23 0x800000
#define B24 0x1000000
#define B25 0x2000000
#define B26 0x4000000
#define B27 0x8000000
#define B28 0x10000000
#define B29 0x20000000
#define B30 0x40000000
#define B31 0x80000000

#define NB0  0xfffffffe
#define NB1  0xfffffffd
#define NB2  0xfffffffb
#define NB3  0xfffffff7
#define NB4  0xffffffef
#define NB5  0xffffffdf
#define NB6  0xffffffbf
#define NB7  0xffffff7f
#define NB8  0xfffffeff
#define NB9  0xfffffdff
#define NB10 0xfffffbff
#define NB11 0xfffff7ff
#define NB12 0xffffefff
#define NB13 0xffffdfff
#define NB14 0xffffbfff
#define NB15 0xffff7fff
#define NB16 0xfffeffff
#define NB17 0xfffdffff
#define NB18 0xfffbffff
#define NB19 0xfff7ffff
#define NB20 0xffefffff
#define NB21 0xffdfffff
#define NB22 0xffbfffff
#define NB23 0xff7fffff
#define NB24 0xfeffffff
#define NB25 0xfdffffff
#define NB26 0xfbffffff
#define NB27 0xf7ffffff
#define NB28 0xefffffff
#define NB29 0xdfffffff
#define NB30 0xbfffffff
#define NB31 0x7fffffff

//MBi = -(1<<i)
#define MB0  0xffffffff
#define MB1  0xfffffffe
#define MB2  0xfffffffc
#define MB3  0xfffffff8
#define MB4  0xfffffff0
#define MB5  0xffffffe0
#define MB6  0xffffffc0
#define MB7  0xffffff80
#define MB8  0xffffff00
#define MB9  0xfffffe00
#define MB10 0xfffffc00
#define MB11 0xfffff800
#define MB12 0xfffff000
#define MB13 0xffffe000
#define MB14 0xffffc000
#define MB15 0xffff8000
#define MB16 0xffff0000
#define MB17 0xfffe0000
#define MB18 0xfffc0000
#define MB19 0xfff80000
#define MB20 0xfff00000
#define MB21 0xffe00000
#define MB22 0xffc00000
#define MB23 0xff800000
#define MB24 0xff000000
#define MB25 0xfe000000
#define MB26 0xfc000000
#define MB27 0xf8000000
#define MB28 0xf0000000
#define MB29 0xe0000000
#define MB30 0xc0000000
#define MB31 0x80000000

const u32 BIT_BY_INDEX[32] = {B0, B1, B2, B3, B4, B5, B6 ,B7 ,B8 ,B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20,
		B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31};

const int HAMMING_WEIGHTS[256] = {0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2,
		3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5,
		3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4,
		5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5,
		5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3,
		4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5,
		4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4,
		5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5,
		5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8};

#define HAMMING(n) (HAMMING_WEIGHTS[(n) & 0xff] + HAMMING_WEIGHTS[( (n) >> 8 ) & 0xff] + \
		HAMMING_WEIGHTS[ ( (n) >> 16 ) & 0xff] + HAMMING_WEIGHTS[( (n) >> 24) & 0xff])

#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
#define MAX(X,Y) ((X) > (Y) ? (X) : (Y))

//SHA definitions
#define K_00_19 ((uint32_t)(0x5a827999L))
#define K_20_39 ((uint32_t)(0x6ed9eba1L))
#define K_40_59 ((uint32_t)(0x8f1bbcdcL))
#define K_60_79 ((uint32_t)(0xca62c1d6L))
//#define C1   ((uint32_t)(0x5a827999L))     /* integer part of 2^30*sqrt(2)  */

#define ROTATE(a,n)      (((a)<<(n))|(((a)&0xffffffff)>>(32-(n))))
#define ROTATER(a,n)     (((a)>>(n))|(((a)&0xffffffff)<<(32-(n))))
//NEGATE_AND_ROTATE30(d) and ROTATE30(d) are used to feel the left bits with '1's in case d is negative
#define NEGATE_AND_ROTATE30(d)      ((d)?((((((-d)>>2) + 0x20000000) & 0x3fffffff) - 0x20000000)):0)
#define SHIFT_RIGHT2_SIGNED(d)       ((d)?(((((( d)>>2) + 0x20000000) & 0x3fffffff) - 0x20000000)):0)
#define SHIFT_RIGHT1_SIGNED(d)       (((d)&(B31))?(((d)>>1)|0x80000000):((d)>>1))
//#define SHIFT_RIGHT5_SIGNED(d)       ((d)?(((((( d)>>5) + 0x4000000) & 0x7ffffff) - 0x4000000)):0)
#define SHIFT_RIGHT5_SIGNED(d)       (((d)&(B31))?(((d)>>5)|0xf8000000):((d)>>5))
#define SHIFT_RIGHT20_SIGNED(d)       (((d)&(B31))?(((d)>>20)|0xfffff000):((d)>>20))
#define ROTATE30(d) ((d)?((((((d)>>2) + 0x20000000) & 0x3fffffff) - 0x20000000)):0)

#define	F_00_19(b,c,d)	 ((((c) ^ (d)) & (b)) ^ (d)) 
#define	F_20_39(b,c,d)	 ((b) ^ (c) ^ (d))
#define F_40_59(b,c,d)   (((b)&((c)|(d))) | ((c)&(d)))
#define F_60_79(b,c,d)   ((b) ^ (c) ^ (d))

#define Xupdate(a, ia, ib, ic, id) a = ROTATE(((ia)^(ib)^(ic)^(id)), 1)


//Algorithm constants and definitions
#define WEIGHT_MINIMIZATION_START 91
#define WEIGHT_MINIMIZATION_END 98
#define MAXIMAL_WEIGHT WEIGHT_MINIMIZATION_START-WEIGHT_MINIMIZATION_START+1
#define NEUTRAL_TRESHOLD 88
#define NEUTRAL_TRESHOLD_ROUND 23
#define MAX_NUMBER_OF_NEUTRALS 31
#define NEUTRALS_CANDIDATES 91
#define LAST_EQUATION_TO_CORRECT 97
#define AUX

//starts from equation 49 ends at 98
#define MASK_POINTER_OFFSET 49
const uint32_t stateMask6To16[11] = {0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000000, 0x28000001};
//           6          7           8          9          10            11          12          13
const u32 STATE_MASK_POINTER[56][25] = {
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0x28000004, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },//50
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0x38000002, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0x4000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xc000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0x2c000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },//60
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0x4000010, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xc000010, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0x2c000010, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000010, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000010, 0x8000001, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000010, 0x08000001, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000010, 0x08000009, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },//70
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000010, 0x28000009, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000010, 0x28000009, 0x8000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000010, 0x28000009, 0x48000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000010, 0x28000009, 0x48000000, 0x8000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000010, 0x28000009, 0x48000000, 0x18000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000010, 0x28000009, 0x48000000, 0x98000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000010, 0x28000009, 0x48000000, 0x98000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000010, 0x28000009, 0x48000000, 0x98000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000010, 0x28000009, 0x48000000, 0x98000000, 0x20000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000010, 0x28000009, 0x48000000, 0x98000000, 0x20000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },//80
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000010, 0x28000009, 0x48000000, 0x98000000, 0x20000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000010, 0x28000009, 0x48000000, 0x98000000, 0x20000000, 0x80000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000010, 0x28000009, 0x48000000, 0x98000000, 0x20000000, 0x80000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000010, 0x28000009, 0x48000000, 0x98000000, 0x20000000, 0x80000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000010, 0x28000009, 0x48000000, 0x98000000, 0x20000000, 0x80000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000010, 0x28000009, 0x48000000, 0x98000000, 0x20000000, 0x80000000, 0x0, 0x80000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000010, 0x28000009, 0x48000000, 0x98000000, 0x20000000, 0x80000000, 0x0, 0x80000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000010, 0x28000009, 0x48000000, 0x98000000, 0x20000000, 0x80000000, 0x0, 0x80000000, 0x20000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000010, 0x28000009, 0x48000000, 0x98000000, 0x20000000, 0x80000000, 0x0, 0x80000000, 0xa0000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000000, 0x28000001, 0x48000000, 0x98000000, 0x20000000, 0x80000000, 0x0, 0x80000000, 0xa0000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },//90
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000000, 0x28000001, 0x48000000, 0x98000000, 0x20000000, 0x80000000, 0x0, 0x80000000, 0xa0000000, 0x80000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000000, 0x28000001, 0x48000000, 0x98000000, 0x20000000, 0x80000000, 0x0, 0x80000000, 0xa0000000, 0x80000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000000, 0x28000001, 0x48000000, 0x98000000, 0x20000000, 0x80000000, 0x0, 0x80000000, 0xa0000000, 0x80000000, 0x20000000, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000000, 0x28000001, 0x48000000, 0x98000000, 0x20000000, 0x80000000, 0x0, 0x80000000, 0xa0000000, 0x80000000, 0x20000000, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000000, 0x28000001, 0x48000000, 0x98000000, 0x20000000, 0x80000000, 0x0, 0x80000000, 0xa0000000, 0x80000000, 0x20000000, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000000, 0x28000001, 0x48000000, 0x98000000, 0x20000000, 0x80000000, 0x0, 0x80000000, 0xa0000000, 0x80000000, 0x20000000, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000000, 0x28000001, 0x48000000, 0x98000000, 0x20000000, 0x80000000, 0x0, 0x80000000, 0xa0000000, 0x80000000, 0x20000000, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0xfc00083f, 0xfc000231, 0xe4000243, 0xfc000042, 0x9c000012, 0x34000006, 0xa8000006, 0xb8000002, 0xac000000, 0xac000000, 0x28000001, 0x48000000, 0x98000000, 0x20000000, 0x80000000, 0x0, 0x80000000, 0xa0000000, 0x80000000, 0x20000000, 0x0, 0x0, 0x0, 0x20000000, 0x0, },
		// a(6)          7           8            9          10          11          12           13          14          15          16          17          18          19          20      21      22          23          24          25       26   27   28       29      30
};

const u32 FUNCTION_MASK_POINTER[56][11] = {
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },//0
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },//10
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },//20
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x10000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x10000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },//30
		{0x10000000, 0x8000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x10000000, 0x28000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x10000000, 0x28000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x10000000, 0x28000000, 0x8000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x10000000, 0x28000000, 0x28000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x10000000, 0x28000000, 0x28000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x10000000, 0x28000000, 0x28000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x10000000, 0x28000000, 0x28000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x10000000, 0x28000000, 0x28000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x10000000, 0x28000000, 0x28000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },//40
		{0x10000000, 0x28000000, 0x28000000, 0x0, 0x0, 0x8000000, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x10000000, 0x28000000, 0x28000000, 0x0, 0x0, 0x8000000, 0x0, 0x0, 0x0, 0x0, 0x0, },
		{0x10000000, 0x28000000, 0x28000000, 0x0, 0x0, 0x8000000, 0x8000000, 0x0, 0x0, 0x0, 0x0, },
		{0x10000000, 0x28000000, 0x28000000, 0x0, 0x0, 0x8000000, 0x8000000, 0x0, 0x0, 0x0, 0x0, },
		{0x10000000, 0x28000000, 0x28000000, 0x0, 0x0, 0x8000000, 0x8000000, 0x8000000, 0x0, 0x0, 0x0, },
		{0x10000000, 0x28000000, 0x28000000, 0x0, 0x0, 0x8000000, 0x8000000, 0x28000000, 0x0, 0x0, 0x0, },
		{0x10000000, 0x28000000, 0x28000000, 0x0, 0x0, 0x8000000, 0x8000000, 0x28000000, 0x0, 0x0, 0x0, },
		{0x10000000, 0x28000000, 0x28000000, 0x0, 0x0, 0x8000000, 0x8000000, 0x28000000, 0x0, 0x0, 0x0, },
		{0x10000000, 0x28000000, 0x28000000, 0x0, 0x0, 0x8000000, 0x8000000, 0x28000000, 0x0, 0x0, 0x0, },
		//   f(20)        21         22       23   24      25         26         27       28   29   30
};


//Performance
//set PERFORMANCE = 0 for the actual run. set PERFORMANCE = 1 to display performance
#define PERFORMANCE 1
#define PRINT_THRESHOLD 104                 //messages that conform to at least PRINT_THRESHOLD are counted and counters are displayed 
#define PRINT_TO_SCREEN_CONFORMANCE 109
#define ELAPSED_MESSAGE_COUNTER 1000
#define ELAPSED_AVERAGE_MESSAGE_COUNTER 10
#if PERFORMANCE == 1
typedef struct
{
  int     conformingMessageCounter;//counts the total number of messages that conforms to at least LAST_EQUATION_TO_CORRECT
  int     counter2;
  clock_t timeAtCounter1;//the clock when messageCounter = 0
  clock_t timeAtCounter2;
}performance_variables;
#endif

//Debug
//0x1 : attack_stage UPTO_67     prints w(r) a(r+1) for r=5,...,15
//0x10: attack_stage _68_TO_89   prints equationToCorrect and failed or next equationToCorrect
//0x100: attack_stage _90_TO_97  prints equationToCorrect and weight
//0x1000: attack_stage ABOVE_97  prints each conforming message and the number of neutral messages we found
#define DEBUG_LOG_LEVEL_UPTO_67  0
#define DEBUG_LOG_LEVEL_68_TO_89 2
#define DEBUG_LOG_LEVEL_90_TO_97 4
#define DEBUG_LOG_LEVEL_ABOVE_97 8
#define DEBUG_LOG_LEVEL 0						\
	//| DEBUG_LOG_LEVEL_UPTO_67 | DEBUG_LOG_LEVEL_68_TO_89 | DEBUG_LOG_LEVEL_90_TO_97 | DEBUG_LOG_LEVEL_ABOVE_97
#define VERIFY_CONFORMING_MESSAGES 0
# define print_at_pause fprintf(stderr, "printed from file: %s line: %d\n", __FILE__, __LINE__);rs_pause();
# define print_at fprintf(stderr, "printed from file: %s line: %d\n", __FILE__, __LINE__);

//Statistics
//all zero = no statistics
//bit 0    = measure corrections probability
//bit 1    = measure equation probability, i.e., the number of times we succeeded in correcting equation/the number of times we tried to correct equation
#define MEASURE_CORRECTIONS_PROBABILITY 1
#define MEASURE_EQUATIONS_PROBABILITY 0
#define STATISTICS MEASURE_CORRECTIONS_PROBABILITY | MEASURE_EQUATIONS_PROBABILITY
#define WRITE_CONF_MESSAGE_TO_FILE_THRESHOLD 114

#define CHECK_FOR_DUPLICATES 1
//TODO update next two
#define MAX_NUMBER_OF_CORRECTIONS 152
#define NUM_OF_EQUATION_TO_CORRECT 34

enum equ_to_solve{equ49=49,equ56=56,equ57=57,equ58=58,equ59=59,equ60=60,equ61=61,equ62=62,equ63=63,equ64=64,equ65=65,equ67=67,
	equ68=68,equ69=69,equ70=70,equ71=71,equ72=72,equ73=73,equ74=74,equ75=75,equ76=76,equ77=77,equ78=78,equ79=79,equ80=80,equ81=81,
	equ82=82,equ83=83,equ84=84,equ85=85,equ86=86,equ87=87,equ88=88,equ89=89};

enum ROUND_INDEX {R5=0, R6=1, R7=2, R8=3, R9=4, R10=5, R11=6, R12=7, R13=8, R14=9, R15=10, R16=11, R17=12, R18=13, R19=14, R20=15, R21=16, R22=17};

using namespace std;
typedef array<int, 86> equation_to_solve;






equation_to_solve const equationList = {49,56,57,58,59,60,62,63,64,65,67,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,
		91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,
		127,128,129,130,131,132,133,134,135,136,137,138,139,140,141};

typedef array<int, NUM_OF_EQUATION_TO_CORRECT> solution_to_read;
solution_to_read const solutionList = {49,56,57,58,59,60,61,62,63,64,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89};

typedef array<unsigned int, 11> messageArray;
typedef array<int, 5> messageID;//message index, base linear derivative(0,...,15), second linear derivative(0,...,3), neutral bit, firstUnsatisfied
struct Key;
struct hash_Key;
struct messageInStack;
typedef	unordered_map<Key, messageID, hash_Key> mHashTable;
typedef stack<messageInStack> mStack;

# define print_at fprintf(stderr, "printed from file: %s line: %d\n", __FILE__, __LINE__);
# define print_at_line fprintf(gDebugLogFile, "line: %d\n", __LINE__);
#define NUM_OF_CORR83 23
#define NUM_OF_CORR84 1


#endif /* __TYPES1_H__ */

